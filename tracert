#! /usr/bin/python

from ctypes import *
import socket
import sys
import time
from struct import *
import struct
import threading

def checksum(data):
    """Calculate the checksum of the given data."""
    if len(data) % 2 != 0:
        data += b'\x00'  # Pad with a zero byte if the length is odd

    s = 0
    for i in range(0, len(data), 2):
        w = (data[i] << 8) + data[i + 1]
        s = s + w

    # Add overflow bits to the sum
    s = (s >> 16) + (s & 0xFFFF)
    s = ~s & 0xFFFF

    return s

def icmp_create(icmp_type, icmp_code, icmp_id, icmp_sequence, data):
    """Create an ICMP packet with the given parameters and return it."""
    icmp_checksum = 0  # Initially, the checksum is set to 0
    icmp_header = pack("!BBHHH", icmp_type, icmp_code, icmp_checksum, icmp_id, icmp_sequence)
    icmp_packet = icmp_header + data

    # Calculate the checksum
    icmp_checksum = checksum(icmp_packet)
    
    # Pack the header again with the correct checksum
    icmp_header = pack("!BBHHH", icmp_type, icmp_code, icmp_checksum, icmp_id, icmp_sequence)
    return icmp_header + data

def IPING(src, dst, count):
    #if len(sys.argv) > 3:
    #    src = sys.argv[1]
    #    dst = sys.argv[2]
    #    count   = int(sys.argv[3])

    # ip header fielss
    ip_ihl = 5
    ip_ver = 4
    ip_tos = 0
    ip_tos_len = 0 # Kernal will fill the correct total length
    ip_id = 54321  # ID of this packet
    ip_frag_off = 0
    ip_ttl = 64
    ip_proto = 1 
    ip_check = 0 # Kernal will fill the correct checksum
    ip_saddr = socket.inet_aton ( src ) # spoof the source ip if u want to
    ip_daddr = socket.inet_aton ( dst )

    # Icmp header 
    icmp_type = 8
    icmp_code = 0
    icmp_checksum = 0
    icmp_id = 0
    icmp_sequence = 0
    payload = b'!@#$%^&*() 1234567890'

    ip_ihl_ver = (ip_ver << 4) + ip_ihl

        # packing the ip header
    # the ! in the pack format string means network order
    ip_header = pack("!BBHHHBBH4s4s" , ip_ihl_ver, ip_tos, ip_tos_len, ip_id, ip_frag_off, ip_ttl, ip_proto, ip_check, ip_saddr, ip_daddr)
    icmp_header = icmp_create(icmp_type, icmp_code, icmp_id, icmp_sequence, payload)
    packet = ip_header + icmp_header
       
       # Request Sending
    print(f"PING  {dst} bytes of data.")    
    for i in range(count):
        sendsock.sendto(packet, (dst , 0))
        time.sleep(1)
        #print(f"Sending ICMP Packet to {dst}")


class IP(Structure):
    _fields_ = [
        ("version",          c_ubyte, 4),
        ("ihl",              c_ubyte, 4),
        ("tos",              c_ubyte, 8),
        ("len",              c_ushort,16),
        ("id",               c_ushort,16),
        ("offset",           c_ushort,16),
        ("ttl",              c_ubyte, 8),
        ("protocol_num",     c_ubyte, 8),
        ("sum",              c_ushort,16),
        ("src",              c_uint32,32),
        ("dst",              c_uint32,32)
        ]

    def __new__(self, socket_buffer=None):
        return self.from_buffer_copy(socket_buffer)

    def __init__(self, socket_buffer=None):

        # map protocol constants to their names
        self.protocol_map = {
                1:"ICMP",
                6:"TCP",
                17:"UDP"
                }
        
        # Human Readble form
        #self.id_num      = socket.inet_ntoa(struct.pack("!I",self.id))
        self.src_address = socket.inet_ntoa(struct.pack("@I",self.src))
        self.dst_address = socket.inet_ntoa(struct.pack("@I",self.dst))
        
        self.protocol_x  = socket.inet_ntoa(struct.pack("@I",self.ttl))

        try:
            self.protocol = self.protocol_map[self.protocol_num]
        except:
            self.protocol = int(self.protocol_num)

def catch():
    #s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))
    s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("eth0", 0))
    
    #for off_Set in range(10000):
    #    continue
    sequnce = 1
        
    try:
        while True:
            # Reading Packet
            resp = s.recvfrom(65565)[0]
            byte_size = (len(resp)) 
            # Creating an IP header from the first 20 bytes of the buffer
            ip = IP(resp[14:])
            
            if ip.protocol == "ICMP":
            # Print out protocol and the host
                print("%s bytes from: %s icmp_sequence: %s ttl: %s" % (byte_size, ip.src_address, sequnce, ip.ttl))
                sequnce += 1 
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    try:
        if len(sys.argv) != 4:
            print("ping <src ip> <dst ip> <count>")
            sys.exit(1)
#
        src = sys.argv[1]
        dst = sys.argv[2]
        count = int(sys.argv[3])
#
        sendsock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)    
        sendsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)   
        sendsock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)    
#
#    Threading
        ip_thread = threading.Thread(target=IPING, args=(src, dst, count))
        catch_thread = threading.Thread(target=catch)
#
        ip_thread.start()
        catch_thread.start()
#
        ip_thread.join()
        catch_thread.join()
        IP(src, dst, count)
    
    except KeyboardInterrupt:
        print("exiting")
        pass
        
